;5.Define a function that, given an nonlinear list, return the list of atoms(from any level) in the list.

(defun atomi(l)
    (cond 
        ((atom l) (list l))
        (t(mapcan #' atomi l))
        )
    )


;(print(atomi '(1(2(3(4 5)6))(7(8 9)))))

;3.Define a function that returns the length of a nonlinear list (in number of atoms at any level)
(defun noOfAtoms(l)
    (cond 
        ((atom l) 1)
        (t(apply #'+(mapcar #'noOfAtoms l)))
    )
)
;(print(noOfAtoms '(1(2(3(4 5)6))(7(8 9)))))

;6.Define a function that,given an nonlinear list returns the list with all negative numerical atoms at any level removed (keeping the list structure)
(defun elim(l)
    (cond
        ((and(numberp l)(minusp l))nil)
        ((atom l) (list l))
        (t(list(mapcan #'elim l)))
        )
    )
(defun elimin(l)
    (car (elim l)))
;(print(elimin '(A(1 B(-1 3 C))2 -3)))

;4. Define a function that, given a nonlinear list returns the number of sublists (including the list) with even length (at the superficial level).

(defun even(l)
    (cond
        ((=(mod (noOfAtoms l)2)0)T)
        (T NIL)
        )
    )


(defun nr(l)
    (cond 
        ((atom l)0)
        ((even l)(+ 1(apply #'+(mapcar #'nr l))))
        (t(apply #'+(mapcar #'nr l)))
        )
    )
;(print(even '(1(2(3(4 5)6))(7(8 9)))))
;(print(even '(2(3(4 5)6))))
;(print(even '(3(4 5)6)))
;(print(even '(4 5)))
;(print(even '(7(8 9))))
;(print(even '(8 9)))

;(print(nr '(1(2(3(4 5)6))(7(8 9)))))

;8. We could represent a general tree in Lisp as a lis =t of the form (root subtree1 subtree 2). 
;Define a function that , given a tree, returns the number of nodes in the tree

(defun nrNodes (l)
    (cond
    ((null(cdr l)) 1)
    (t(+ 1 (apply #'+(mapcar #'nrNodes (cdr l)))))
        )
    )

;(print(nrNodes '(1 (2)(3 (5)(6)))))
;(print(noOfAtoms '(1 (2)(3 (5)(6)))))


;9 Define a function that, given a tree represented as above, return the depth of the tree

(defun depth(l)
    (cond
        ((null(cdr l)) 0)
        (t(+ 1(apply #'max(mapcar #'depth (cdr l)))))
        )
    )
(defun depth2(l)
    (cond
        ((atom l) 0)
        (t(+ 1(apply #'max(mapcar #'depth2 l)))))
        )
    

;(print(depth '(1 (2)(3 (5)(6 (7))))))
;(print(depth2 '(1 (2)(3 (5)(6 (7))))))

;10. Define a function which, given an nonlinear list, returns the list of atoms that appear on any level but in reverse order

(defun reverseList(l)
    (cond
        ((atom l) (list l))
        (t(mapcan #'reverseList(reverse l)))))

;(print(reverseList '(A(B C(D (E)))(F G))))

;12. Write a function to return the number of occurences of a certain element in a nonlinear list at any level

(defun noOfOccurences (l e)
    (cond
    ((equal l e)1)
    ((atom l)0)
    (t(apply #'+(mapcar #'(lambda (l) (noOfOccurences l e)) l)))))

;(print (noOfOccurences '(1(a(3(4 a)a))(7 (a 9))) 'a))

;13. Give a nonlinear list, write a function to return the list with all negative numeric atoms removed.
(defun removeNegative(l)
    (cond
        ((and(numberp l)(minusp l))nil)
        ((atom l)(list l))
        (t(list(mapcan #'removeNegative l)))
        )
    )
(defun mainRemoveNegative (l)
    (car(removeNegative l)))

;(print(mainRemoveNegative '(a 2 (b -4 (c -6))-1)))

;14. Write a function to return the list of atoms at depth n from a non-linear list. The superficial level is assumed 1

(defun nodesAtDepth(l n)
    (cond
        ((and(atom l)(= n 0))(list l))
        ((= n 0) nil)
        ((atom l) nil)
        (t (mapcan #'(lambda (l)(nodesAtDepth l (- n 1)))l))
        )
    )
;(print (nodesAtDepth '((a (b(c d))) e (f (g h(i))))3))

;16. Given  a  set  represented  as  a  linear  list,  write  a  function  to  generate  the  list  of permutations of that set. Use a MAP function.

(permutari‘(1 2 3)) →((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1))

(defun permutari(L) 
    (cond 
        ((null (cdr L)) (list L))
        (t (mapcan #'   (lambda (e) (mapcar #'(lambda (p) (cons e p)) (permutari(remove e L)))) L )) 
        )
    ) 
;2020 ex 1 pb 3

(defun removeA(l)
    (cond
        ((and(numberp l)(=(mod l 3)0))nil)
        ((atom l)(list l))
        (t(list(mapcan #'removeA l)))
    )
)

(defun mainRemove(l)
    (car(removeA l))
    )

;(print(mainRemove '(1(2 A(3 A))(6))))
;(print(mainRemove '(1(2 (C)))))

;2020 ex 2 pb 4

(defun replaceAtLevel (l n e)
    (cond
        ((and(= (mod n 2) 1)(atom l))(list e))
        ((atom l)(list l))
        (t(list(mapcan #'(lambda (l) (replaceAtLevel l (+ n 1) e))l)))
        )
    )
(defun main(l e)
    (replaceAtLevel l -1 e))
;(print(main '(a(b (g))(c(d(e))(f))) 'h))
;(print(replaceAtLevel '(a(b (g))(c(d(e))(f))) 0 'h))


;2020 ex 3 pb 4
(defun replaceAtLevelK(l n k)
    (cond
        ((and(atom l)(= n k))(list 0))
        ((atom l)(list l))
        (t(list(mapcan #'(lambda (l) (replaceAtLevelK l (+ n 1) k)) l)))
        )
    )
(defun mainReplaceAtLevelK(l k)
    (replaceAtLevelK l 0 k))
;(print(mainReplaceAtLevelK '(a(1(2 b))(c(d))) 2))

;2020 ex 4 pb 4
(defun replaceNumber(l)
    (cond 
        ((and(numberp l)(= (mod l 2)0))(list (+ l 1)))
        ((atom l)(list l))
        (t(list(mapcan #'replaceNumber l)))
        )
    )
(defun mainReplaceNumber(l)
    (car(replaceNumber l)))
;(print(mainReplaceNumber '( 1 s 4 (2 f (7)))))

;2019 ex 1 pb 4
(defun check(l)
    (cond
        ((null l) nil)
        ((and(null(cdr l))(not(numberp(car l))))T)
        (T(check (cdr l)))
        )
    )
;(print (check '(D 1 (6 F))))
;(print (check '(6 F)))
;(print (check '((G 4)6)))

(defun sublists (l)
    (cond
        ((atom l)0)
        ((check l) (+ 1 (apply #'+(mapcar #'sublists l))))
        (t(apply #'+(mapcar #'sublists l)))
        )
    )
;(print(sublists '(A(B 2)(1 C 4)(D 1 (6 F))((G 4)6)F)))


;2019 ex 2 pb 4
(defun maxi(l r)
    (cond
        ((null l)r)
        ((and(numberp(car l))(>(car l) r))(maxi(cdr l) (car l)))
        ((and(numberp (car l))(<(car l) r))(maxi(cdr l) r))
        ((listp (car l))(maxi (cdr l) (maxi (car l) r)))
        (t(maxi(cdr l) r))                                
        )
    )
(defun maximum (l)
    (cond
        ((atom l)l)
        (t(apply #'max(mapcar #'maximum l)))
        )
    )

(defun check2(l)
       (cond
          ((null l)nil)
          ((=(mod (maxi (cdr l) -999999999) 2)  0) t)
          (t nil)
      )
    )
          
(defun sublistsMax(l n)
    (cond
        ((atom l)0)
        ((and (check2 l)(= (mod n 2) 0))(+ 1(apply #'+(mapcar #'(lambda (l) (sublistsMax l (+ n 1)))l))))
        (t(apply #'+(mapcar #'(lambda (l) (sublistsMax l (+ n 1)))l)))
        )
    )

(defun main (l)
    (sublistsMax l -1))
;(print(maximum '(1(2(3)(4(5))))))
;(print(maxi'(1(2(3)(4(5)))) '1))

;(print(check '(1(2(3)(4(6))))))
;(print(check'(1(2(3)(4(5))))))

;(print (check '(A(B 2)(1 C 4)(1 (6(F))(((G)4)6)))))
(print (main '(A(B 2)(1 C 4)(1 (6(F))(((G)4)6)))))


;2020 ex 3 pb 4
(defun noOfNonnumeric(l)
    (cond
        ((numberp l)0)
        ((atom l)1)
        (t(apply #'+(mapcar #'noOfNonnumeric l)))
        )
    )


;(print(noOfNonnumeric '(A B C (1) 3)))
(defun check (l)
    (cond
        ((= (mod (noOfNonnumeric l)  2)  1) t)
        (t nil)
        )
    )
(defun sublists(l n)
    (cond
        ((atom l)0)
        ((and(= (mod n 2) 0)(check l))(+ 1 (apply #'+(mapcar #'(lambda (l) (sublists l (+ n 1)))l))))
        (t(apply #'+(mapcar #'(lambda (l) (sublists l (+ n 1)))l)))
        )
    )
(defun main(l)
    (sublists  l 0)
    )
(print(main '(A(B 2)(1 C 4)(1(6 F))(((G)4)6)))) ;=> it results 3 because it takes into consideration the list itself because it respects the rule



%2019 ex 4 pb 4
(defun mini (a b)
    (cond
        ((< a b)a)
        (t b)
        )
    )
(defun minimum(l)
    (COND
    ((null l) 9999999)
    ((numberp (car l))(mini(car l) (minimum (cdr l))))
    ((listp (car l))(mini (minimum (car l))(minimum (cdr l))))
    (t(minimum(cdr l)))
    ))

(defun check(l)
    (cond 
        ((=(mod (minimum l)2) 0) t)
        (t nil)
        )
    )
(defun submultimi(l n)
    (cond
        ((atom l)0)
        ((and (= (mod n 2)1)(check l))(+ 1 (apply #'+(mapcar #'(lambda (l) (submultimi l (+ n 1)))l))))
        (t(apply #'+(mapcar #'(lambda (l) (submultimi l (+ n 1)))l)))
        )
    )
    
(print(submultimi '(A (B 2)(2 C 4) (1 (3 F))(((G)4)2)) 0)) 
